---
# tasks file for configure-networking

###############################
# Install networking packages #
###############################
- name: Install network package dependencies
  apt: name="{{ item }}" state=latest update_cache=yes
  with_items:
    - bridge-utils
    - debootstrap
    - ifenslave
    - ifenslave-2.6
    - lsof
    - tcpdump
    - vlan
    - fping
    - nmap
  tags: install

#############################################
# Enable required sysctl and kernel modules #
#############################################
# - name: disable ipv6 on all nodes
#   sysctl: name="{{ item.name }}" value="{{ item.option }}" state=present reload=yes
#   with_items:
#     - { name: net.ipv6.conf.all.disable_ipv6, option: 1 }
#     - { name: net.ipv6.conf.default.disable_ipv6, option: 1 }
#     - { name: net.ipv6.conf.lo.disable_ipv6, option: 1 }
#   tags:
#     - sysctl
#     - kernel

- name: load required kernel modules on boot
  lineinfile: dest=/etc/modules backup=yes regexp='{{ item.regexp }}' line='{{ item.line }}' state=present
  with_items:
    # - { regexp: '^(.*)bonding', line: 'bonding' }
    - { regexp: '^(.*)8021q', line: '8021q' }
  tags:
    - modprobe
    - kernel  

- name: enable required kernel modules
  modprobe: name="{{ item }}" state=present
  with_items:
    # - bonding
    - 8021q
  tags:
    - modprobe
    - kernel

# Verify operation
# for i in <HOSTS>; do echo $i;ssh -p <SSH_PORT> -q root@$i "cat /etc/modules | grep 'bonding\|8021q'"; echo; done

#######################
# Ensure interfaces.d #
#######################
- name: create directory
  file:
    path: "{{ network_interface_path }}"
    state: directory
  tags:
    - config

############################
# Template interfaces file #
############################
- name: template interfaces
  template:
    src: all_interfaces.j2
    dest: "{{ network_all_interfaces_path }}"
    backup: yes
  tags:
    - networking

####################
# Remove old files #
####################
- name: create directory
  file:
    path: "{{ network_interfaces_dir_path }}/backups"
    state: directory
  tags:
    - config

- name: backup files
  shell: "for i in $(ls {{ network_interface_path }});do mv {{ network_interface_path }}/$i {{ network_interfaces_dir_path }}/backups/${i}.$(date +'%Y%m%d_%H%M%S');done"

###############################
# Template interfaces.d files #
###############################
- name: configure physical and tagged interface
  template:
    src: eth.j2
    dest: "{{ network_interface_path }}/device-eth"
  with_dict: '{{ TARGET_HOSTS }}'
  when: item.key == "{{ ansible_hostname }}"
  tags: debug

- name: configure bridge interfaces
  template:
    src: bridges.j2
    dest: "{{ network_interface_path }}/device-bridges"
  with_dict: '{{ TARGET_HOSTS }}'
  when: item.key == "{{ ansible_hostname }}"
  tags: debug

- name: manually up and down interfaces
  shell: ifdown -a && ifup -a
  tags: restart-networking
